# Exemplo de configuração Nginx para Eklesia IA
# Subdomínios: ia.eklesia.app.br (frontend), api-ia.eklesia.app.br (backend)
# Inclui HTTPS com Let's Encrypt e redirecionamento HTTP->HTTPS

# --- HTTP para HTTPS (redirecionamento global) ---
server {
    listen 80;
    server_name ia.eklesia.app.br api-ia.eklesia.app.br;
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    location / {
        return 301 https://$host$request_uri;
    }
}

# --- FRONTEND: ia.eklesia.app.br ---
server {
    listen 443 ssl;
    server_name ia.eklesia.app.br;

    ssl_certificate /etc/letsencrypt/live/ia.eklesia.app.br/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ia.eklesia.app.br/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    location / {
        proxy_pass http://localhost:3000; # Porta do frontend React
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# --- BACKEND: api-ia.eklesia.app.br ---
server {
    listen 443 ssl;
    server_name api-ia.eklesia.app.br;

    ssl_certificate /etc/letsencrypt/live/api-ia.eklesia.app.br/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api-ia.eklesia.app.br/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    location / {
        proxy_pass http://localhost:3333; # Porta do backend Node.js
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# --- Dicas de uso ---
# 1. Ajuste as portas do proxy_pass conforme seu docker-compose ou ambiente.
# 2. Gere certificados com certbot (Let’s Encrypt):
#    sudo certbot certonly --nginx -d ia.eklesia.app.br -d api-ia.eklesia.app.br
# 3. Reinicie o nginx após alterações: sudo systemctl reload nginx
# 4. Para múltiplos domínios, repita os blocos conforme necessário.
